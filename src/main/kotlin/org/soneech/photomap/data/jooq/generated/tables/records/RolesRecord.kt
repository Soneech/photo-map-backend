/*
 * This file is generated by jOOQ.
 */
package org.soneech.photomap.`data`.jooq.generated.tables.records


import jakarta.annotation.Nullable
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.20"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class RolesRecord() : UpdatableRecordImpl<RolesRecord>(org.soneech.photomap.`data`.jooq.generated.tables.Roles.ROLES) {

    open var id: Long?
        set(value): Unit = set(0, value)
    @Nullable
        get(): Long? = get(0) as Long?

    @get:NotNull
    @get:Size(max = 255)
    open var name: String?
        set(value): Unit = set(1, value)
    @NotNull
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised RolesRecord
     */
    constructor(id: Long? = null, name: String? = null): this() {
        this.id = id
        this.name = name
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RolesRecord
     */
    constructor(value: org.soneech.photomap.`data`.jooq.generated.tables.pojos.Roles?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            resetChangedOnNotNull()
        }
    }
}
