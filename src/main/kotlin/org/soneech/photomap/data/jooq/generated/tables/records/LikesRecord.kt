/*
 * This file is generated by jOOQ.
 */
package org.soneech.photomap.`data`.jooq.generated.tables.records


import jakarta.validation.constraints.NotNull

import javax.annotation.processing.Generated

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.20"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class LikesRecord() : UpdatableRecordImpl<LikesRecord>(org.soneech.photomap.`data`.jooq.generated.tables.Likes.LIKES) {

    @get:NotNull
    open var userId: Long?
        set(value): Unit = set(0, value)
    @NotNull
        get(): Long? = get(0) as Long?

    @get:NotNull
    open var markId: Long?
        set(value): Unit = set(1, value)
    @NotNull
        get(): Long? = get(1) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Long?> = super.key() as Record2<Long?, Long?>

    /**
     * Create a detached, initialised LikesRecord
     */
    constructor(userId: Long? = null, markId: Long? = null): this() {
        this.userId = userId
        this.markId = markId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised LikesRecord
     */
    constructor(value: org.soneech.photomap.`data`.jooq.generated.tables.pojos.Likes?): this() {
        if (value != null) {
            this.userId = value.userId
            this.markId = value.markId
            resetChangedOnNotNull()
        }
    }
}
