/*
 * This file is generated by jOOQ.
 */
package org.soneech.photomap.`data`.jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.io.Serializable
import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.20"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Mark(
    var id: Long? = null,
    @get:NotNull
    var userId: Long? = null,
    @get:NotNull
    var latitude: BigDecimal? = null,
    @get:NotNull
    var longitude: BigDecimal? = null,
    @get:NotNull
    @get:Size(max = 255)
    var name: String? = null,
    @get:Size(max = 1000000000)
    var description: String? = null,
    var likes: Long? = null,
    var createdAt: LocalDateTime? = null,
    var updatedAt: LocalDateTime? = null
): Serializable {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Mark = other as Mark
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.userId == null) {
            if (o.userId != null)
                return false
        }
        else if (this.userId != o.userId)
            return false
        if (this.latitude == null) {
            if (o.latitude != null)
                return false
        }
        else if (this.latitude != o.latitude)
            return false
        if (this.longitude == null) {
            if (o.longitude != null)
                return false
        }
        else if (this.longitude != o.longitude)
            return false
        if (this.name == null) {
            if (o.name != null)
                return false
        }
        else if (this.name != o.name)
            return false
        if (this.description == null) {
            if (o.description != null)
                return false
        }
        else if (this.description != o.description)
            return false
        if (this.likes == null) {
            if (o.likes != null)
                return false
        }
        else if (this.likes != o.likes)
            return false
        if (this.createdAt == null) {
            if (o.createdAt != null)
                return false
        }
        else if (this.createdAt != o.createdAt)
            return false
        if (this.updatedAt == null) {
            if (o.updatedAt != null)
                return false
        }
        else if (this.updatedAt != o.updatedAt)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.userId == null) 0 else this.userId.hashCode())
        result = prime * result + (if (this.latitude == null) 0 else this.latitude.hashCode())
        result = prime * result + (if (this.longitude == null) 0 else this.longitude.hashCode())
        result = prime * result + (if (this.name == null) 0 else this.name.hashCode())
        result = prime * result + (if (this.description == null) 0 else this.description.hashCode())
        result = prime * result + (if (this.likes == null) 0 else this.likes.hashCode())
        result = prime * result + (if (this.createdAt == null) 0 else this.createdAt.hashCode())
        result = prime * result + (if (this.updatedAt == null) 0 else this.updatedAt.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Mark (")

        sb.append(id)
        sb.append(", ").append(userId)
        sb.append(", ").append(latitude)
        sb.append(", ").append(longitude)
        sb.append(", ").append(name)
        sb.append(", ").append(description)
        sb.append(", ").append(likes)
        sb.append(", ").append(createdAt)
        sb.append(", ").append(updatedAt)

        sb.append(")")
        return sb.toString()
    }
}
