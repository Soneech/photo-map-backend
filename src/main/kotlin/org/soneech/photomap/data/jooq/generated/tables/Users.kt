/*
 * This file is generated by jOOQ.
 */
package org.soneech.photomap.`data`.jooq.generated.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.20"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Users(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?,
    parentPath: InverseForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?,
    aliased: Table<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>(
    alias,
    org.soneech.photomap.`data`.jooq.generated.DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>USERS</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord> = org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord::class.java

    /**
     * The column <code>USERS.ID</code>.
     */
    val ID: TableField<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, Long?> = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>USERS.NAME</code>.
     */
    val NAME: TableField<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>USERS.EMAIL</code>.
     */
    val EMAIL: TableField<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, String?> = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(320).nullable(false), this, "")

    /**
     * The column <code>USERS.PASSWORD</code>.
     */
    val PASSWORD: TableField<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, String?> = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(1000).nullable(false), this, "")

    /**
     * The column <code>USERS.ROLE</code>.
     */
    val ROLE: TableField<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, String?> = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>USERS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>USERS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>USERS</code> table reference
     */
    constructor(): this(DSL.name("USERS"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?, parentPath: InverseForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = [
            "https://www.jooq.org",
            "jOOQ version:3.19.20"
        ],
        comments = "This class is generated by jOOQ"
    )
    open class UsersPath : Users, Path<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?, parentPath: InverseForeignKey<out Record, org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>): super(alias, aliased)
        override fun `as`(alias: String): UsersPath = UsersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UsersPath = UsersPath(alias, this)
        override fun `as`(alias: Table<*>): UsersPath = UsersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else org.soneech.photomap.`data`.jooq.generated.DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, Long?> = super.getIdentity() as Identity<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord> = org.soneech.photomap.`data`.jooq.generated.keys.CONSTRAINT_4
    override fun getUniqueKeys(): List<UniqueKey<org.soneech.photomap.`data`.jooq.generated.tables.records.UsersRecord>> = listOf(org.soneech.photomap.`data`.jooq.generated.keys.CONSTRAINT_4D)

    private lateinit var _comment: org.soneech.photomap.`data`.jooq.generated.tables.Comment.CommentPath

    /**
     * Get the implicit to-many join path to the <code>COMMENT</code> table
     */
    fun comment(): org.soneech.photomap.`data`.jooq.generated.tables.Comment.CommentPath {
        if (!this::_comment.isInitialized)
            _comment = org.soneech.photomap.`data`.jooq.generated.tables.Comment.CommentPath(this, null, org.soneech.photomap.`data`.jooq.generated.keys.FK_COMMENT_USER.inverseKey)

        return _comment;
    }

    val comment: org.soneech.photomap.`data`.jooq.generated.tables.Comment.CommentPath
        get(): org.soneech.photomap.`data`.jooq.generated.tables.Comment.CommentPath = comment()

    private lateinit var _mark: org.soneech.photomap.`data`.jooq.generated.tables.Mark.MarkPath

    /**
     * Get the implicit to-many join path to the <code>MARK</code> table
     */
    fun mark(): org.soneech.photomap.`data`.jooq.generated.tables.Mark.MarkPath {
        if (!this::_mark.isInitialized)
            _mark = org.soneech.photomap.`data`.jooq.generated.tables.Mark.MarkPath(this, null, org.soneech.photomap.`data`.jooq.generated.keys.FK_MARK_USER.inverseKey)

        return _mark;
    }

    val mark: org.soneech.photomap.`data`.jooq.generated.tables.Mark.MarkPath
        get(): org.soneech.photomap.`data`.jooq.generated.tables.Mark.MarkPath = mark()
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)
    override fun `as`(alias: Table<*>): Users = Users(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Users = Users(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Users = Users(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Users = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Users = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Users = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Users = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Users = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Users = where(DSL.notExists(select))
}
