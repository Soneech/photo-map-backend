/*
 * This file is generated by jOOQ.
 */
package org.soneech.photomap.`data`.jooq.generated.tables.records


import jakarta.annotation.Nullable
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.20"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class MarkRecord() : UpdatableRecordImpl<MarkRecord>(org.soneech.photomap.`data`.jooq.generated.tables.Mark.MARK) {

    @get:NotNull
    open var id: Long?
        set(value): Unit = set(0, value)
    @NotNull
        get(): Long? = get(0) as Long?

    @get:NotNull
    open var userId: Long?
        set(value): Unit = set(1, value)
    @NotNull
        get(): Long? = get(1) as Long?

    @get:NotNull
    open var latitude: BigDecimal?
        set(value): Unit = set(2, value)
    @NotNull
        get(): BigDecimal? = get(2) as BigDecimal?

    @get:NotNull
    open var longitude: BigDecimal?
        set(value): Unit = set(3, value)
    @NotNull
        get(): BigDecimal? = get(3) as BigDecimal?

    @get:NotNull
    @get:Size(max = 255)
    open var name: String?
        set(value): Unit = set(4, value)
    @NotNull
        get(): String? = get(4) as String?

    @get:Size(max = 1000000000)
    open var description: String?
        set(value): Unit = set(5, value)
    @Nullable
        get(): String? = get(5) as String?

    open var likes: Long?
        set(value): Unit = set(6, value)
    @Nullable
        get(): Long? = get(6) as Long?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(7, value)
    @Nullable
        get(): LocalDateTime? = get(7) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(8, value)
    @Nullable
        get(): LocalDateTime? = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised MarkRecord
     */
    constructor(id: Long? = null, userId: Long? = null, latitude: BigDecimal? = null, longitude: BigDecimal? = null, name: String? = null, description: String? = null, likes: Long? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.latitude = latitude
        this.longitude = longitude
        this.name = name
        this.description = description
        this.likes = likes
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised MarkRecord
     */
    constructor(value: org.soneech.photomap.`data`.jooq.generated.tables.pojos.Mark?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.latitude = value.latitude
            this.longitude = value.longitude
            this.name = value.name
            this.description = value.description
            this.likes = value.likes
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            resetChangedOnNotNull()
        }
    }
}
